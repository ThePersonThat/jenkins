@Library('pipelineLib') _

pipeline {
    agent any

    options {
        skipDefaultCheckout()
    }

    stages {
        stage('Stop running builds for the branch') {
            steps {
                stopRunningBuilds()
            }
        }

        stage('Wipe workspace and checkout') {
            steps {
                checkoutCurrentBranch()
            }
        }

        stage('Analyze') {
            steps {
                withChecks('Analyze checkstyle') {
                    runWithMaven {
                        script {
                            def checkstyleFilename = 'checkstyle-result.xml'

                            sh "mvn checkstyle:checkstyle -DcheckstyleFileName=${checkstyleFilename}"

                            recordIssues(
                                    aggregatingResults: true,
                                    publishAllIssues: isMasterBranch(),
                                    qualityGates: [getQualityGate()],
                                    tools: [
                                            java(),
                                            checkStyle(pattern: "**/${checkstyleFilename}", reportEncoding: 'UTF-8')
                                    ]
                            )
                        }
                    }
                }

                withChecks('Run tests') {
                    runTests()
                }
            }

            post {
                always {
                    sh "test 1 != 1"
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Test'
            }
        }
    }
}

def getQualityGate() {
    def type = isMasterBranch() ? 'TOTAL' : 'NEW'

    return [threshold: 1, type: "${type}"]
}

def isMasterBranch() {
    gitUtils.getCurrentBranch().equals('master')
}